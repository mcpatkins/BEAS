# Test for means (Function created by Jabed Tomal)

# H_0: \mu_1 = \mu_2
# vs
# H_A: \mu_1 > \mu_2

TestMeans <- function(x1, x2){
  # x1: vector of sample values from Population 1
  # x2: vector of sample values from Population 2

  n1 <- length(x1) # number of sample values in x1
  n2 <- length(x2) # number of sample values in x2

  x1b <- mean(x1) # mean of x1
  s1 <- sd(x1) # SD of x1
  x2b <- mean(x2) # mean of x2
  s2 <- sd(x2) # SD of x2

  # Pooled sample standard deviation
  sp <- sqrt(((n1-1)*s1^2 + (n2 - 1)* s2^2)/(n1 + n2 - 2))

  # Test statistics
  tcal <- (x1b - x2b)/(sp*(sqrt((1/n1) + (1/n2))))

  # degrees of freedom
  dfs <- ((s1^2/n1)+(s2^2/n2))^2/(((s1^2/n1)^2/(n1-1)) + ((s2^2/n2)^2/(n2-1)))

  # P-value
  pval <- 1 - pt(tcal, df = dfs)

  # Results
  res <- list(TestStatistic = tcal, DegreesFreedom = dfs, Pvalue = pval)
  
  # Return values
  return(res)
}


# Test for variances (Function created by Jabed)

# H_0: \sigma^2_1 = \sigma^2_2
# vs
# H_A: \sigma^2_1 > \sigma^2_2

TestVars <- function(x1, x2){
  # x1: vector of sample values from Population 1
  # x2: vector of sample values from Population 2

  n1 <- length(x1) # number of sample values in x1
  n2 <- length(x2) # number of sample values in x2

  s1 <- sd(x1) # SD of x1
  s2 <- sd(x2) # SD of x2


  # Test statistics
  Fcal <- s1^2/s2^2


  # P-value
  pval <- 1 - pf(Fcal, df1 = (n1 - 1), df2 = (n2 - 1))

  # Results
  res <- list(TestStatistic = Fcal, df1 = (n1 - 1), df2 = (n2 - 1), Pvalue = pval)
  
  # Return values
  return(res)
}


# Reading data
rm(list = ls())

ratt <- read.csv("Osoyoos Data", header = T) # Read data from CSV format
ratt$Julian.Date <- ratt$Julian.Date - 20000
ratt <- ratt[-21,]

head(ratt)

# The number of rattle at distance zero

length(ratt$RattleDistance[ratt$RattleDistance == 0])
# [1] 64

# The number of rattle with distance greater than zero

length(ratt$RattleDistance[ratt$RattleDistance != 0])
# [1] 44

# Histogram of rattle with distance more than zero

hist(ratt$RattleDistance[ratt$RattleDistance > 0], xlab = "Rattle distance (meter)", main = "")
##whereAmI = ""
##dev.print(device = postscript, paste(whereAmI, "Hist_Non_Zero_Rattle.eps",sep=""),width=8,height=8, horizontal = FALSE)
##dev.print(pdf, paste(whereAmI, "Hist_Non_Zero_Rattle.pdf",sep=""),width=8,height=8)


# Comment: The distribution is not symmetric - rather positively skewed.

# Histogram of log of rattle with distance more than zero

hist(log(ratt$RattleDistance[ratt$RattleDistance > 0]), xlab = "Log of rattle distance (log-meter)", main = "")
##whereAmI = ""
##dev.print(device = postscript, paste(whereAmI, "Hist_Non_Zero_Rattle_Log.eps",sep=""),width=8,height=8, horizontal = FALSE)
##dev.print(pdf, paste(whereAmI, "Hist_Non_Zero_Rattle_Log.pdf",sep=""),width=8,height=8)


# After taking log the distribution becomes reasonably symmetric

ratt$RattleDistance
ratt$Site

# Park
length(ratt$RattleDistance[ratt$RattleDistance == 0 & ratt$Site == 1])
# [1] 43

# Ranch
length(ratt$RattleDistance[ratt$RattleDistance == 0 & ratt$Site == 2])
# [1] 21

# Park
length(ratt$RattleDistance[ratt$RattleDistance != 0 & ratt$Site == 1])
# [1] 11

# Ranch
length(ratt$RattleDistance[ratt$RattleDistance != 0 & ratt$Site == 2])
# [1] 33

# Changing the labels for site

ratt$Site <- (ratt$Site * -1) + 3 # Site = 2: Park; Site = 1: Ranch

attach(ratt) # Attach data to R console

plot(BodyCondition, RattleDistance, xlab = "Body condition (%)", ylab = "Rattle distance (meter)")
#whereAmI = ""
#dev.print(device = postscript, paste(whereAmI, "BC_RD.eps",sep=""),width=8,height=8, horizontal = FALSE)
#dev.print(pdf, paste(whereAmI, "BC_RD.pdf",sep=""),width=8,height=8)



# Site = 2: Park, Site = 1: Ranch

# Histogram of rattle distance

hist(RattleDistance, xlab = "Rattle distance (meter)", main = "") # Histogram of the response variable
#whereAmI = ""
#dev.print(device = postscript, paste(whereAmI, "Hist_Full.eps",sep=""),width=8,height=8, horizontal = FALSE)
#dev.print(pdf, paste(whereAmI, "Hist_Full.pdf",sep=""),width=8,height=8)

# Positively skewed - not symmetric or normal
# Moreover, the rattle distance is zero inflated

# Boxplot against Site

boxplot(RattleDistance ~ Site, xlab = "Sites", ylab = "Rattle distance (meter)", names = c("Ranch", "Park"))
#whereAmI = ""
#dev.print(device = postscript, paste(whereAmI, "Boxplot_Site.eps",sep=""),width=8,height=8, horizontal = FALSE)
#dev.print(pdf, paste(whereAmI, "Boxplot_Site.pdf",sep=""),width=8,height=8)

# Comment: The median and scatter of rattle distances in the park is much
# lower than the ranch.

# Comparing Means
TestMeans(RattleDistance[Site == 1], RattleDistance[Site == 2])

#$TestStatistic
#[1] 4.329297
#
#$DegreesFreedom
#[1] 63.20356
#
#$Pvalue
#[1] 2.720777e-05

# Comment: The mean rattle distance is significantly higher in ranch than park

# Comparing Variances
TestVars(RattleDistance[Site == 1], RattleDistance[Site == 2])

#$TestStatistic
#[1] 10.29136


#$Pvalue
#[1] 6.439294e-15

# Comment: The rattle distance variance is significantly higher in ranch than park


# Boxplot against Sex

boxplot(RattleDistance ~ Sex, xlab = "Sex of snakes", ylab = "Distance from snake when rattle occurs (m)", names = c("Male", "Female"))

# Comment: The median and scatter of rattle distance among male and female snakes
# are not different.

# Comparing Means
TestMeans(RattleDistance[Sex == 1], RattleDistance[Sex == 2])

# $TestStatistic
# [1] -0.3882651

# $DegreesFreedom
# [1] 102.2368

# $Pvalue
# [1] 0.6506864

# Comment: The mean rattle distance among male and female snakes are not statistically significant

# Comparing Variances
TestVars(RattleDistance[Sex == 1], RattleDistance[Sex == 2])

$TestStatistic
[1] 1.070367

$Pvalue
[1] 0.4075018

# Comment: The rattle distance variances among male and female snakes are not statistically significant

# Boxplot againt Weather

boxplot(RattleDistance ~ Weather, xlab = "Percent cloudiness", ylab = "Distance from snake when rattle occurs (m)")

# Summary statistics of Rattle Distance against Percent Cloudiness

sm <- NULL
for(i in sort(unique(Weather))){
  sm <- cbind(sm, c(i, length(RattleDistance[Weather == i]), summary(RattleDistance[Weather == i])))
}
rownames(sm) <- c("Percent Cloud", "Number of Rattle", "Minimum", "1st Quartile", "Median", "Mean", "3rd Quartile", "Max")
print(sm)

# Scatter plot of Rattle Distance against JulianDate by Site

par(mfrow = c(2, 2))

# Park
plot(Julian.Date[Site == 2], RattleDistance[Site == 2], xlab = "Days from Jan 1", ylab = "Rattle Distance", main = "Park", xlim = range(Julian.Date), ylim = range(RattleDistance))

# Ranch
plot(Julian.Date[Site == 1], RattleDistance[Site == 1], xlab = "Days from Jan 1", ylab = "Rattle Distance", main = "Ranch", xlim = range(Julian.Date), ylim = range(RattleDistance))


# Scatter plot of Rattle Distance against JulianDate by Sex


# Male
plot(Julian.Date[Sex == 1], RattleDistance[Sex == 1], xlab = "Days from Jan 1", ylab = "Rattle Distance", main = "Male", xlim = range(Julian.Date), ylim = range(RattleDistance))

# Female
plot(Julian.Date[Sex == 2], RattleDistance[Sex == 2], xlab = "Days from Jan 1", ylab = "Rattle Distance", main = "Female", xlim = range(Julian.Date), ylim = range(RattleDistance))


# Reading data
rm(list = ls())
ratt <- read.csv("C:/Users/jtomal/Desktop/Tablet_Files_Jan_03_2020/Marcus_Karl/Osoyoos_rattle_new.csv", header = T) # Read data from CSV format
ratt$Julian.Date <- ratt$Julian.Date - 20000
ratt <- ratt[-21,]
ratt$Site <- (ratt$Site * -1) + 3 # Site = 2: Park; Site = 1: Ranch
attach(ratt) # Attach data to R console
head(ratt)

# Regression model (Main Effects only)

reg1 <- lm(RattleDistance ~ factor(Site) + BodyTemp + factor(Sex) + Weather + Julian.Date + BodyCondition, data = ratt)
summary(reg1)

# Call:
# lm(formula = RattleDistance ~ factor(Site) + BodyTemp + factor(Sex) + 
#     Weather + Julian.Date + BodyCondition, data = ratt)

# Residuals:
#     Min      1Q  Median      3Q     Max 
# -1.4093 -0.4836 -0.1373  0.2267  5.0093 

# Coefficients:
#                Estimate Std. Error t value Pr(>|t|)    
# (Intercept)   -1.247212   0.933543  -1.336   0.1846    
# factor(Site)2 -0.763894   0.178810  -4.272 4.39e-05 ***
# BodyTemp       0.015050   0.016780   0.897   0.3719    
# factor(Sex)2  -0.010972   0.178971  -0.061   0.9512    
# Weather        0.001040   0.002391   0.435   0.6645    
# Julian.Date    0.006811   0.003709   1.836   0.0692 .  
# BodyCondition  0.102883   0.089227   1.153   0.2516    
# ---
# Signif. codes:  0 *** 0.001 ** 0.01 * 0.05 . 0.1   1

# Residual standard error: 0.891 on 101 degrees of freedom
# Multiple R-squared:  0.1969,    Adjusted R-squared:  0.1492 
# F-statistic: 4.128 on 6 and 101 DF,  p-value: 0.0009502


# Comment: Site is highly significant and Julian.Date is marginally significant.

anova(reg1)

# Analysis of Variance Table

# Response: RattleDistance
#                Df Sum Sq Mean Sq F value    Pr(>F)    
# factor(Site)    1 15.001 15.0006 18.8970 3.297e-05 ***
# BodyTemp        1  1.515  1.5152  1.9088    0.1701    
# factor(Sex)     1  0.076  0.0755  0.0951    0.7584    
# Weather         1  0.090  0.0900  0.1134    0.7370    
# Julian.Date     1  1.925  1.9251  2.4251    0.1225    
# BodyCondition   1  1.055  1.0554  1.3295    0.2516    
# Residuals     101 80.175  0.7938                      
# ---
# Signif. codes:  0 *** 0.001 ** 0.01 * 0.05 . 0.1   1

AIC(reg1)

# [1] 290.3148

# Regression model (Main Effects + Pairwise Interactions)

reg2 <- lm(RattleDistance ~ factor(Site) + BodyTemp + factor(Sex) + Weather + Julian.Date + BodyCondition + factor(Site) * BodyTemp + factor(Site) * factor(Sex) + factor(Site) * Weather + factor(Site) * Julian.Date + factor(Site) * BodyCondition + BodyTemp * factor(Sex) + BodyTemp * Weather + BodyTemp * Julian.Date + BodyTemp * BodyCondition + factor(Sex) * Weather + factor(Sex) * Julian.Date + factor(Sex) * BodyCondition + Weather * Julian.Date + Weather * BodyCondition + Julian.Date * BodyCondition, data = ratt)
summary(reg2)

# Call:
# lm(formula = RattleDistance ~ factor(Site) + BodyTemp + factor(Sex) + 
#     Weather + Julian.Date + BodyCondition + factor(Site) * BodyTemp + 
#     factor(Site) * factor(Sex) + factor(Site) * Weather + factor(Site) * 
#     Julian.Date + factor(Site) * BodyCondition + BodyTemp * factor(Sex) + 
#     BodyTemp * Weather + BodyTemp * Julian.Date + BodyTemp * 
#     BodyCondition + factor(Sex) * Weather + factor(Sex) * Julian.Date + 
#     factor(Sex) * BodyCondition + Weather * Julian.Date + Weather * 
#     BodyCondition + Julian.Date * BodyCondition, data = ratt)

# Residuals:
#     Min      1Q  Median      3Q     Max 
# -1.5675 -0.4138 -0.1291  0.2235  4.6093 

# Coefficients:
#                               Estimate Std. Error t value Pr(>|t|)
# (Intercept)                 -4.181e+00  6.182e+00  -0.676    0.501
# factor(Site)2                1.798e+00  2.119e+00   0.848    0.399
# BodyTemp                     7.384e-02  1.987e-01   0.372    0.711
# factor(Sex)2                -7.849e-01  2.329e+00  -0.337    0.737
# Weather                     -9.032e-03  2.784e-02  -0.324    0.746
# Julian.Date                  1.048e-02  2.453e-02   0.427    0.670
# BodyCondition                1.092e+00  9.759e-01   1.119    0.266
# factor(Site)2:BodyTemp      -5.471e-02  3.980e-02  -1.375    0.173
# factor(Site)2:factor(Sex)2   2.576e-01  4.051e-01   0.636    0.526
# factor(Site)2:Weather       -7.143e-03  5.197e-03  -1.375    0.173
# factor(Site)2:Julian.Date   -4.283e-03  8.747e-03  -0.490    0.626
# factor(Site)2:BodyCondition -2.560e-02  1.977e-01  -0.129    0.897
# BodyTemp:factor(Sex)2       -1.227e-04  4.353e-02  -0.003    0.998
# BodyTemp:Weather             7.792e-05  6.836e-04   0.114    0.910
# BodyTemp:Julian.Date         7.265e-05  7.129e-04   0.102    0.919
# BodyTemp:BodyCondition      -1.151e-02  2.256e-02  -0.510    0.611
# factor(Sex)2:Weather         4.867e-03  5.295e-03   0.919    0.361
# factor(Sex)2:Julian.Date     7.068e-03  8.490e-03   0.833    0.407
# factor(Sex)2:BodyCondition  -2.898e-01  2.165e-01  -1.339    0.184
# Weather:Julian.Date          2.278e-05  1.101e-04   0.207    0.837
# Weather:BodyCondition        1.200e-03  2.555e-03   0.470    0.640
# Julian.Date:BodyCondition   -3.061e-03  3.773e-03  -0.811    0.419

# Residual standard error: 0.916 on 86 degrees of freedom
# Multiple R-squared:  0.2773,    Adjusted R-squared:  0.1008 
# F-statistic: 1.571 on 21 and 86 DF,  p-value: 0.07587

# Comment: No variables appeared significant

anova(reg2)

# Analysis of Variance Table

# Response: RattleDistance
#                            Df Sum Sq Mean Sq F value    Pr(>F)    
# factor(Site)                1 15.001 15.0006 17.8796 5.847e-05 ***
# BodyTemp                    1  1.515  1.5152  1.8060    0.1825    
# factor(Sex)                 1  0.076  0.0755  0.0900    0.7649    
# Weather                     1  0.090  0.0900  0.1073    0.7440    
# Julian.Date                 1  1.925  1.9251  2.2945    0.1335    
# BodyCondition               1  1.055  1.0554  1.2580    0.2652    
# factor(Site):BodyTemp       1  1.479  1.4789  1.7628    0.1878    
# factor(Site):factor(Sex)    1  0.057  0.0566  0.0674    0.7957    
# factor(Site):Weather        1  0.572  0.5718  0.6815    0.4113    
# factor(Site):Julian.Date    1  0.856  0.8562  1.0205    0.3152    
# factor(Site):BodyCondition  1  0.003  0.0032  0.0038    0.9511    
# BodyTemp:factor(Sex)        1  0.003  0.0034  0.0041    0.9492    
# BodyTemp:Weather            1  0.144  0.1439  0.1715    0.6798    
# BodyTemp:Julian.Date        1  0.121  0.1211  0.1443    0.7050    
# BodyTemp:BodyCondition      1  0.526  0.5260  0.6269    0.4307    
# factor(Sex):Weather         1  0.486  0.4860  0.5793    0.4487    
# factor(Sex):Julian.Date     1  1.476  1.4763  1.7596    0.1882    
# factor(Sex):BodyCondition   1  1.492  1.4917  1.7780    0.1859    
# Weather:Julian.Date         1  0.166  0.1658  0.1976    0.6578    
# Weather:BodyCondition       1  0.090  0.0896  0.1068    0.7447    
# Julian.Date:BodyCondition   1  0.552  0.5521  0.6580    0.4195    
# Residuals                  86 72.152  0.8390                      
# ---
# Signif. codes:  0 *** 0.001 ** 0.01 * 0.05 . 0.1   1

# Comment: Only Site remains significant

AIC(reg2)

# [1] 308.9286

# Comment: The AIC went up

# Testing extra sum of squares for the pairwise interaction terms

anova(reg1, reg2)

# Analysis of Variance Table

# Model 1: RattleDistance ~ factor(Site) + BodyTemp + factor(Sex) + Weather + 
#     Julian.Date + BodyCondition
# Model 2: RattleDistance ~ factor(Site) + BodyTemp + factor(Sex) + Weather + 
#     Julian.Date + BodyCondition + factor(Site) * BodyTemp + factor(Site) * 
#     factor(Sex) + factor(Site) * Weather + factor(Site) * Julian.Date + 
#     factor(Site) * BodyCondition + BodyTemp * factor(Sex) + BodyTemp * 
#     Weather + BodyTemp * Julian.Date + BodyTemp * BodyCondition + 
#     factor(Sex) * Weather + factor(Sex) * Julian.Date + factor(Sex) * 
#     BodyCondition + Weather * Julian.Date + Weather * BodyCondition + 
#     Julian.Date * BodyCondition
#   Res.Df    RSS Df Sum of Sq      F Pr(>F)
# 1    101 80.175                           
# 2     86 72.152 15    8.0223 0.6375  0.836

# Comment: All the pairwise correlations are statistically insignificant

# Regression model (Only with Site)

reg3 <- lm(RattleDistance ~ factor(Site), data = ratt)
summary(reg3)

# Call:
# lm(formula = RattleDistance ~ factor(Site), data = ratt)

# Residuals:
#     Min      1Q  Median      3Q     Max 
# -0.9009 -0.2884 -0.1556  0.1491  5.0491 

# Coefficients:
#               Estimate Std. Error t value Pr(>|t|)    
# (Intercept)     0.9009     0.1217   7.400 3.37e-11 ***
# factor(Site)2  -0.7454     0.1722  -4.329 3.40e-05 ***
# ---
# Signif. codes:  0 *** 0.001 ** 0.01 * 0.05 . 0.1   1

# Residual standard error: 0.8946 on 106 degrees of freedom
# Multiple R-squared:  0.1503,    Adjusted R-squared:  0.1422 
# F-statistic: 18.74 on 1 and 106 DF,  p-value: 3.403e-05

# Comment: The variable Site is significant

anova(reg3)

# Analysis of Variance Table

# Response: RattleDistance
#               Df Sum Sq Mean Sq F value    Pr(>F)    
# factor(Site)   1 15.001 15.0006  18.743 3.403e-05 ***
# Residuals    106 84.836  0.8003                      
# ---
# Signif. codes:  0 *** 0.001 ** 0.01 * 0.05 . 0.1   1

AIC(reg3)

# [1] 286.418

# Extra sum of squares for all the Main Effects but Site

anova(reg1, reg3)

# Analysis of Variance Table

# Model 1: RattleDistance ~ factor(Site) + BodyTemp + factor(Sex) + Weather + 
#     Julian.Date + BodyCondition
# Model 2: RattleDistance ~ factor(Site)
#   Res.Df    RSS Df Sum of Sq      F Pr(>F)
# 1    101 80.175                           
# 2    106 84.836 -5   -4.6612 1.1744  0.327

# Comment: The effects of all the main variables other than Site are insignificant


########################################################

# Reading data

rm(list = ls())
ratt <- read.csv("Osoyoos Data", header = T) # Read data from CSV format
ratt$Julian.Date <- ratt$Julian.Date - 20000
ratt <- ratt[-21,]
ratt$Site <- (ratt$Site * -1) + 3 # Site = 2: Park; Site = 1: Ranch
attach(ratt) # Attach data to R console

# Fitting two-part models

# Part 1 model for the zero y's

mle1.rattle <- function(b0, b1, x, y){
  # b0: The initial value of intercept
  # b1: The initial value of slope
  # x: The predictor variable
  # y: The response variable
  b <- c(b0, b1)
  n <- length(y) # Total number of data points
  n0 <- length(y[y == 0])  # The number of zero y values
  x0 <- sum(x[y == 0])    # The sum of the predictor variable for which the response is zero
  r <- 0 # Number of iterations
  repeat{
    b0 <- b[1]
    b1 <- b[2]
    r <- r + 1
    pr <- rep(0, n)
    p1 <- p2 <- p3 <- p4 <- p5 <- 0
    for(i in 1:n){
      pr[i] <- exp(b0 + b1 * x[i])/(1 + exp(b0 + b1 * x[i]))
      p1 <- p1 + pr[i]
      p2 <- p2 + x[i] * pr[i]
      p3 <- p3 + pr[i] * (1 - pr[i])
      p4 <- p4 + x[i] * pr[i] * (1 - pr[i])
      p5 <- p5 + x[i]^2 * pr[i] * (1 - pr[i])
    }
    score <- c(n0 - p1, x0 - p2)
    infor <- matrix(c(p3, p4, p4, p5), ncol = 2, byrow = T)
    b.new <- b + solve(infor) %*% score
    if(abs(b.new[1] - b[1]) <= 0.001 & abs(b.new[2] - b[2]) <= 0.001){
      cat("Number of iterations \n")
      print(r)
      cat("Estimate of the parameter vector Beta\n")
      print(b.new)
      cat("Estimated variance-covariance matrix \n")
      print(solve(infor))
      cat("Estimate of the test statistics Z \n")
      print(b.new/sqrt(diag(solve(infor))))
      cat("Estimate of the p-values \n")
      print(2 * (1 - pnorm(abs(b.new/sqrt(diag(solve(infor)))), mean = 0, sd = 1)))
      cat("Probability of rattle at zero distance in the Ranch \n")
      print(exp(b.new[1] + b.new[2] * 1)/(1 + exp(b.new[1] + b.new[2] * 1)))
      cat("Probability of rattle at zero distance in the Park \n")
      print(exp(b.new[1] + b.new[2] * 2)/(1 + exp(b.new[1] + b.new[2] * 2)))
      cat("The odds of ZERO distance over non-zero distance rattle in the Park is", exp(b.new[2]), "times higher than that in the Ranch. \n")
      cat("The AIC \n")
      AIC <- -2 * sum(b.new[1] + b.new[2] * x[y == 0]) + 2 * sum(log(1 + exp(b.new[1] + b.new[2] * x))) + 2 * length(b.new)
      print(AIC)
      break
    }
    b <- b.new
  }
}


mle1.rattle(0, 0, Site, RattleDistance)

## Number of iterations 
## [1] 4
## Estimate of the parameter vector Beta
##           [,1]
## [1,] -2.267275
## [2,]  1.815290
## Estimated variance-covariance matrix 
##            [,1]       [,2]
## [1,]  0.4258518 -0.2700076
## [2,] -0.2700076  0.1920855
## Estimate of the test statistics Z 
##           [,1]
## [1,] -3.474361
## [2,]  4.141891
## Estimate of the p-values 
##              [,1]
## [1,] 5.120710e-04
## [2,] 3.444541e-05
## Probability of rattle at zero distance in the Ranch 
## [1] 0.3888889
## Probability of rattle at zero distance in the Park 
## [1] 0.7962963
## The odds of ZERO distance over non-zero distance rattle in the Park is 6.142857 times higher than that in the Ranch. 
## The AIC (Part 1)
## [1] 130.7642

# Part 2 model for the non-zero y's 

mle2.rattle <- function(b0, b1, sig2, x, y){
  # b0: The initial value of intercept
  # b1: The initial value of slope
  # sig2: The initial value of variance
  # x: The predictor variable
  # y: The response variable
  theta <- c(b0, b1, sig2)
  n <- length(y) # Total number of data points
  r <- 0 # Number of iterations
  repeat{
    b0 <- theta[1]
    b1 <- theta[2]
    sig2 <- theta[3]
    r <- r + 1
    s1 <- sum(log(y) - b0 - b1 * x)/sig2
    s2 <- sum((log(y) - b0 - b1 * x) * x)/sig2
    s3 <- (-n + sum((log(y) - b0 - b1 * x)^2)/sig2)/(2*sig2)
    score <- c(s1, s2, s3)
    i11 <- n/sig2
    i12 <- sum(x)/sig2
    i13 <- sum(log(y) - b0 - b1 * x)/sig2^2
    i22 <- sum(x^2)/sig2
    i23 <- sum(x * (log(y) - b0 - b1 * x))/sig2^2
    i33 <- -n/(2 * sig2^2) + sum((log(y) - b0 - b1 * x)^2)/sig2^3
    infor <- matrix(c(i11, i12, i13, i12, i22, i23, i13, i23, i33), ncol = 3, byrow = T)
    theta.new <- theta + solve(infor) %*% score
    if(abs(theta.new[1] - theta[1]) <= 0.001 & abs(theta.new[2] - theta[2]) <= 0.001 & abs(theta.new[3] - theta[3]) <= 0.001){
      cat("Number of iterations \n")
      print(r)
      cat("Estimate of the parameter vector Theta\n")
      print(theta.new)
      cat("Estimated variance-covariance matrix \n")
      print(solve(infor))
      cat("Estimate of the test statistics Z \n")
      print(theta.new[c(1, 2)]/sqrt(diag(solve(infor)))[c(1, 2)])
      cat("Estimate of the p-values \n")
      print(2 * (1 - pnorm(abs(theta.new[c(1, 2)]/sqrt(diag(solve(infor)))[c(1, 2)]), mean = 0, sd = 1)))
      cat("AIC \n")
      AIC <- n * log(2 * pi) + n * log(theta.new[3]) + (1/theta.new[3]) * sum((log(y) - theta.new[1] - theta.new[2] * x)^2) + 2 * length(theta.new)
      print(AIC)
      break
    }
    theta <- theta.new
  }
}

Site <- Site[RattleDistance > 0]
RattleDistance <- RattleDistance[RattleDistance > 0]
summary(lm(log(RattleDistance) ~ Site))
 
mle2.rattle(0.70, -0.57, 0.51, Site, RattleDistance)

# Results

## Number of iterations 
## [1] 3
## Estimate of the parameter vector Theta
##            [,1]
## [1,]  0.6956175
## [2,] -0.5736630
## [3,]  0.4869791
## Estimated variance-covariance matrix 
##               [,1]          [,2]          [,3]
## [1,]  1.032937e-01 -7.378118e-02 -2.344517e-08
## [2,] -7.378118e-02  5.902494e-02 -1.959602e-08
## [3,] -2.344517e-08 -1.959602e-08  1.077742e-02
## Estimate of the test statistics Z 
## [1]  2.164381 -2.361234
## Estimate of the p-values 
## [1] 0.03043512 0.01821424
## AIC (Part 2)
## [1] 99.20709

# Comment: When the distance of rattle is non-zero, the average of
# log of rattle distance 0.57 lower in the park than in the ranch.


# Combined AIC (Part 1 + Part 2)
# 130.7642 + 99.20709 = 229.97129

# Comment: The AIC in the two-part model is much lower than the
# classical regression model 


########################################################

# Reading data
rm(list = ls())
ratt <- read.csv("Osoyoos Data", header = T) # Read data from CSV format
ratt$Julian.Date <- ratt$Julian.Date - 20000
ratt <- ratt[-21,]
ratt$Site <- (ratt$Site * -1) + 3 # Site = 2: Park; Site = 1: Ranch
attach(ratt) # Attach data to R console

# Fitting two-part models (full - all 6 predictors)

# Part 1 model for the zero y's

mle1.rattle.full <- function(b0, b1, b2, b3, b4, b5, b6, x1, x2, x3, x4, x5, x6, y){
  # b0: The initial value of intercept
  # b1: The initial value of slope (Site)
  # b2: The initial value of slope (BodyTemp)
  # b3: The initial value of slope (Sex)
  # b4: The initial value of slope (Weather)
  # b5: The initial value of slope (Julian.Date)
  # b6: The initial value of slope (BodyCondition)
  # x1: The predictor variable (Site)
  # x2: The predictor variable (BodyTemp)
  # x3: The predictor variable (Sex)
  # x4: The predictor variable (Weather)
  # x5: The predictor variable (Julian.Date)
  # x6: The predictor variable (BodyCondition)
  # y: The response variable
  b <- c(b0, b1, b2, b3, b4, b5, b6)
  n <- length(y) # Total number of data points
  n0 <- length(y[y == 0])  # The number of zero y values
  x10 <- sum(x1[y == 0])    # The sum of the predictor variable (Site) for which the response is zero
  x20 <- sum(x2[y == 0])    # The sum of the predictor variable (BodyTemp) for which the response is zero
  x30 <- sum(x3[y == 0])    # The sum of the predictor variable (Sex) for which the response is zero
  x40 <- sum(x4[y == 0])    # The sum of the predictor variable (Weather) for which the response is zero
  x50 <- sum(x5[y == 0])    # The sum of the predictor variable (Julian.Date) for which the response is zero
  x60 <- sum(x6[y == 0])    # The sum of the predictor variable (BodyCondition) for which the response is zero
  r <- 0 # Number of iterations
  repeat{
    b0 <- b[1]
    b1 <- b[2]
    b2 <- b[3]
    b3 <- b[4]
    b4 <- b[5]
    b5 <- b[6]
    b6 <- b[7]
    r <- r + 1
    pr <- rep(0, n)
    s0 <- s1 <- s2 <- s3 <- s4 <- s5 <- s6 <- 0
    i00 <- i01 <- i02 <- i03 <- i04 <- i05 <- i06 <- 0
    i11 <- i12 <- i13 <- i14 <- i15 <- i16 <- 0
    i22 <- i23 <- i24 <- i25 <- i26 <- 0
    i33 <- i34 <- i35 <- i36 <- 0
    i44 <- i45 <- i46 <- 0
    i55 <- i56 <- 0
    i66 <- 0
    for(i in 1:n){
      pr[i] <- exp(b0 + b1 * x1[i] + b2 * x2[i] + b3 * x3[i] + b4 * x4[i] + b5 * x5[i] + b6 * x6[i])/(1 + exp(b0 + b1 * x1[i] + b2 * x2[i] + b3 * x3[i] + b4 * x4[i] + b5 * x5[i] + b6 * x6[i]))
      s0 <- s0 + pr[i]
      s1 <- s1 + x1[i] * pr[i]
      s2 <- s2 + x2[i] * pr[i]
      s3 <- s3 + x3[i] * pr[i]
      s4 <- s4 + x4[i] * pr[i]
      s5 <- s5 + x5[i] * pr[i]
      s6 <- s6 + x6[i] * pr[i]
      i00 <- i00 + pr[i] * (1 - pr[i])
      i01 <- i01 + x1[i] * pr[i] * (1 - pr[i])
      i02 <- i02 + x2[i] * pr[i] * (1 - pr[i])
      i03 <- i03 + x3[i] * pr[i] * (1 - pr[i])
      i04 <- i04 + x4[i] * pr[i] * (1 - pr[i])
      i05 <- i05 + x5[i] * pr[i] * (1 - pr[i])
      i06 <- i06 + x6[i] * pr[i] * (1 - pr[i])
      i11 <- i11 + x1[i]^2 * pr[i] * (1 - pr[i])
      i12 <- i12 + x1[i] * x2[i] * pr[i] * (1 - pr[i])
      i13 <- i13 + x1[i] * x3[i] * pr[i] * (1 - pr[i])
      i14 <- i14 + x1[i] * x4[i] * pr[i] * (1 - pr[i])
      i15 <- i15 + x1[i] * x5[i] * pr[i] * (1 - pr[i])
      i16 <- i16 + x1[i] * x6[i] * pr[i] * (1 - pr[i])
      i22 <- i22 + x2[i]^2 * pr[i] * (1 - pr[i])
      i23 <- i23 + x2[i] * x3[i] * pr[i] * (1 - pr[i])
      i24 <- i24 + x2[i] * x4[i] * pr[i] * (1 - pr[i])
      i25 <- i25 + x2[i] * x5[i] * pr[i] * (1 - pr[i])
      i26 <- i26 + x2[i] * x6[i] * pr[i] * (1 - pr[i])
      i33 <- i33 + x3[i]^2 * pr[i] * (1 - pr[i])
      i34 <- i34 + x3[i] * x4[i] * pr[i] * (1 - pr[i])
      i35 <- i35 + x3[i] * x5[i] * pr[i] * (1 - pr[i])
      i36 <- i36 + x3[i] * x6[i] * pr[i] * (1 - pr[i])
      i44 <- i44 + x4[i]^2 * pr[i] * (1 - pr[i])
      i45 <- i45 + x4[i] * x5[i] * pr[i] * (1 - pr[i])
      i46 <- i46 + x4[i] * x6[i] * pr[i] * (1 - pr[i])
      i55 <- i55 + x5[i]^2 * pr[i] * (1 - pr[i])
      i56 <- i56 + x5[i] * x6[i] * pr[i] * (1 - pr[i])
      i66 <- i66 + x6[i]^2 * pr[i] * (1 - pr[i])
    }
    score <- c(n0 - s0, x10 - s1, x20 - s2, x30 - s3, x40 - s4, x50 - s5, x60 - s6)
    infor <- matrix(c(i00, i01, i02, i03, i04, i05, i06,
                      i01, i11, i12, i13, i14, i15, i16,
                      i02, i12, i22, i23, i24, i25, i26,
                      i03, i13, i23, i33, i34, i35, i36,
                      i04, i14, i24, i34, i44, i45, i46,
                      i05, i15, i25, i35, i45, i55, i56,
                      i06, i16, i26, i36, i46, i56, i66),
                      ncol = 7, byrow = T)
    b.new <- b + solve(infor) %*% score
    if(abs(b.new[1] - b[1]) <= 0.001 & abs(b.new[2] - b[2]) <= 0.001 & abs(b.new[3] - b[3]) <= 0.001 & abs(b.new[4] - b[4]) <= 0.001 & abs(b.new[5] - b[5]) <= 0.001 & abs(b.new[6] - b[6]) <= 0.001 & abs(b.new[7] - b[7]) <= 0.001){
      cat("Number of iterations \n")
      print(r)
      result <- cbind(b.new, sqrt(diag(solve(infor))), b.new/sqrt(diag(solve(infor))), 2 * (1 - pnorm(abs(b.new/sqrt(diag(solve(infor)))), mean = 0, sd = 1)))
      colnames(result) <- c("Coefficients", "Std Errors", "Test Statistics (Z)", "P-values")
      rownames(result) <- c("Intercept", "Site", "Body Temp", "Sex", "Weather", "Julian Date", "Body Condition")
      print(result)      
      cat("\nThe AIC \n")
      AIC <- -2 * sum(b.new[1] + b.new[2] * x1[y == 0] + b.new[3] * x2[y == 0] + b.new[4] * x3[y == 0] + b.new[5] * x4[y == 0] + b.new[6] * x5[y == 0] + b.new[7] * x6[y == 0]) + 2 * sum(log(1 + exp(b.new[1] + b.new[2] * x1 + b.new[3] * x2 + b.new[4] * x3 + b.new[5] * x4 + b.new[6] * x5 + b.new[7] * x6))) + 2 * length(b.new)
      print(AIC)
      break
    }
    b <- b.new
  }
}


mle1.rattle.full(0, 0, 0, 0, 0, 0, 0, Site, BodyTemp, Sex, Weather, Julian.Date, BodyCondition, RattleDistance)

## Number of iterations 
## [1] 4
##                Coefficients  Std Errors Test Statistics (Z)     P-values
## Intercept       2.803240352 2.660656515           1.0535897 2.920708e-01
## Site            1.861193771 0.471233934           3.9496175 7.827619e-05
## Body Temp      -0.048601672 0.046482005          -1.0456019 2.957449e-01
## Sex            -0.151954884 0.456499427          -0.3328698 7.392325e-01
## Weather        -0.005943586 0.006097030          -0.9748330 3.296431e-01
## Julian Date    -0.012084309 0.009729992          -1.2419649 2.142495e-01
## Body Condition -0.277234226 0.226320919          -1.2249607 2.205900e-01

## The AIC 
## [1] 135.6052

# Comment: Only 1 variable Site is significant in Part 1 of the model.

# Part 2 model for the non-zero y's 

mle2.rattle.full <- function(b0, b1, b2, b3, b4, b5, b6, sig2, x1, x2, x3, x4, x5, x6, y){
  # b0: The initial value of intercept
  # b1: The initial value of slope (Site)
  # b2: The initial value of slope (BodyTemp)
  # b3: The initial value of slope (Sex)
  # b4: The initial value of slope (Weather)
  # b5: The initial value of slope (Julian.Date)
  # b6: The initial value of slope (BodyCondition)
  # sig2: The initial value of variance
  # x1: The predictor variable (Site)
  # x2: The predictor variable (BodyTemp)
  # x3: The predictor variable (Sex)
  # x4: The predictor variable (Weather)
  # x5: The predictor variable (Julian.Date)
  # x6: The predictor variable (BodyCondition)
  # y: The response variable
  theta <- c(b0, b1, b2, b3, b4, b5, b6, sig2)
  n <- length(y) # Total number of data points
  r <- 0 # Number of iterations
  repeat{
    b0 <- theta[1]
    b1 <- theta[2]
    b2 <- theta[3]
    b3 <- theta[4]
    b4 <- theta[5]
    b5 <- theta[6]
    b6 <- theta[7]
    sig2 <- theta[8]
    r <- r + 1
    s0 <- sum(log(y) - b0 - b1 * x1 - b2 * x2 - b3 * x3 - b4 * x4 - b5 * x5 - b6 * x6)/sig2
    s1 <- sum((log(y) - b0 - b1 * x1 - b2 * x2 - b3 * x3 - b4 * x4 - b5 * x5 - b6 * x6) * x1)/sig2
    s2 <- sum((log(y) - b0 - b1 * x1 - b2 * x2 - b3 * x3 - b4 * x4 - b5 * x5 - b6 * x6) * x2)/sig2
    s3 <- sum((log(y) - b0 - b1 * x1 - b2 * x2 - b3 * x3 - b4 * x4 - b5 * x5 - b6 * x6) * x3)/sig2
    s4 <- sum((log(y) - b0 - b1 * x1 - b2 * x2 - b3 * x3 - b4 * x4 - b5 * x5 - b6 * x6) * x4)/sig2
    s5 <- sum((log(y) - b0 - b1 * x1 - b2 * x2 - b3 * x3 - b4 * x4 - b5 * x5 - b6 * x6) * x5)/sig2
    s6 <- sum((log(y) - b0 - b1 * x1 - b2 * x2 - b3 * x3 - b4 * x4 - b5 * x5 - b6 * x6) * x6)/sig2
    s7 <- (-n + sum((log(y) - b0 - b1 * x1 - b2 * x2 - b3 * x3 - b4 * x4 - b5 * x5 - b6 * x6)^2)/sig2)/(2*sig2)
    score <- c(s0, s1, s2, s3, s4, s5, s6, s7)
    i00 <- n/sig2
    i01 <- sum(x1)/sig2
    i02 <- sum(x2)/sig2
    i03 <- sum(x3)/sig2
    i04 <- sum(x4)/sig2
    i05 <- sum(x5)/sig2
    i06 <- sum(x6)/sig2
    i07 <- sum(log(y) - b0 - b1 * x1 - b2 * x2 - b3 * x3 - b4 * x4 - b5 * x5 - b6 * x6)/sig2^2
    i11 <- sum(x1^2)/sig2
    i12 <- sum(x1 * x2)/sig2
    i13 <- sum(x1 * x3)/sig2
    i14 <- sum(x1 * x4)/sig2
    i15 <- sum(x1 * x5)/sig2
    i16 <- sum(x1 * x6)/sig2
    i17 <- sum(x1 * (log(y) - b0 - b1 * x1 - b2 * x2 - b3 * x3 - b4 * x4 - b5 * x5 - b6 * x6))/sig2^2
    i22 <- sum(x2^2)/sig2
    i23 <- sum(x2 * x3)/sig2
    i24 <- sum(x2 * x4)/sig2
    i25 <- sum(x2 * x5)/sig2
    i26 <- sum(x2 * x6)/sig2
    i27 <- sum(x2 * (log(y) - b0 - b1 * x1 - b2 * x2 - b3 * x3 - b4 * x4 - b5 * x5 - b6 * x6))/sig2^2
    i33 <- sum(x3^2)/sig2
    i34 <- sum(x3 * x4)/sig2
    i35 <- sum(x3 * x5)/sig2
    i36 <- sum(x3 * x6)/sig2
    i37 <- sum(x3 * (log(y) - b0 - b1 * x1 - b2 * x2 - b3 * x3 - b4 * x4 - b5 * x5 - b6 * x6))/sig2^2
    i44 <- sum(x4^2)/sig2
    i45 <- sum(x4 * x5)/sig2
    i46 <- sum(x4 * x6)/sig2
    i47 <- sum(x4 * (log(y) - b0 - b1 * x1 - b2 * x2 - b3 * x3 - b4 * x4 - b5 * x5 - b6 * x6))/sig2^2
    i55 <- sum(x5^2)/sig2
    i56 <- sum(x5 * x6)/sig2
    i57 <- sum(x5 * (log(y) - b0 - b1 * x1 - b2 * x2 - b3 * x3 - b4 * x4 - b5 * x5 - b6 * x6))/sig2^2
    i66 <- sum(x6^2)/sig2
    i67 <- sum(x6 * (log(y) - b0 - b1 * x1 - b2 * x2 - b3 * x3 - b4 * x4 - b5 * x5 - b6 * x6))/sig2^2
    i77 <- -n/(2 * sig2^2) + sum((log(y) - b0 - b1 * x1 - b2 * x2 - b3 * x3 - b4 * x4 - b5 * x5 - b6 * x6)^2)/sig2^3
    infor <- matrix(c(i00, i01, i02, i03, i04, i05, i06, i07,
                      i01, i11, i12, i13, i14, i15, i16, i17,
                      i02, i12, i22, i23, i24, i25, i26, i27,
                      i03, i13, i23, i33, i34, i35, i36, i37,
                      i04, i14, i24, i34, i44, i45, i46, i47,
                      i05, i15, i25, i35, i45, i55, i56, i57,
                      i06, i16, i26, i36, i46, i56, i66, i67,
                      i07, i17, i27, i37, i47, i57, i67, i77),
                      ncol = 8, byrow = T)
    theta.new <- theta + solve(infor) %*% score
    print(theta.new)
    if(abs(theta.new[1] - theta[1]) <= 0.001 & abs(theta.new[2] - theta[2]) <= 0.001 & abs(theta.new[3] - theta[3]) <= 0.001 & abs(theta.new[4] - theta[4]) <= 0.001 & abs(theta.new[5] - theta[5]) <= 0.001 & abs(theta.new[6] - theta[6]) <= 0.001 & abs(theta.new[7] - theta[7]) <= 0.001 & abs(theta.new[8] - theta[8]) <= 0.001){
      cat("Number of iterations \n")
      print(r)
      result <- cbind(theta.new[1:7], sqrt(diag(solve(infor)))[c(1:7)], theta.new[c(1:7)]/sqrt(diag(solve(infor)))[c(1:7)], 2 * (1 - pnorm(abs(theta.new[c(1:7)]/sqrt(diag(solve(infor)))[c(1:7)]), mean = 0, sd = 1)))
      colnames(result) <- c("Coefficients", "Std Errors", "Test Statistics (Z)", "P-values")
      rownames(result) <- c("Intercept", "Site", "Body Temp", "Sex", "Weather", "Julian Date", "Body Condition")
      print(result)      
      cat("\nAIC \n")
      AIC <- n * log(2 * pi) + n * log(theta.new[8]) + (1/theta.new[8]) * sum((log(y) - theta.new[1] - theta.new[2] * x1 - theta.new[3] * x2 - theta.new[4] * x3 - theta.new[5] * x4 - theta.new[6] * x5 - theta.new[7] * x6)^2) + 2 * length(theta.new)
      print(AIC)
      break
    }
    theta <- theta.new
  }
}

Site <- Site[RattleDistance > 0]
BodyTemp <- BodyTemp[RattleDistance > 0]
Sex <- Sex[RattleDistance > 0]
Weather <- Weather[RattleDistance > 0]
Julian.Date <- Julian.Date[RattleDistance > 0]
BodyCondition <- BodyCondition[RattleDistance > 0]
RattleDistance <- RattleDistance[RattleDistance > 0]
summary(lm(log(RattleDistance)~Site + BodyTemp + Sex + Weather + Julian.Date + BodyCondition))

mle2.rattle.full(-1.3237, -0.5994, 0.0105, -0.0489, -0.0012, 0.0078, 0.0887, 0.5149, Site, BodyTemp, Sex, Weather, Julian.Date, BodyCondition, RattleDistance)

## Number of iterations 
## [1] 4
##                Coefficients  Std Errors Test Statistics (Z)   P-values
## Intercept      -1.323680030 1.265345094          -1.0461020 0.29551394
## Site           -0.599382912 0.243842773          -2.4580713 0.01396855
## Body Temp       0.010527034 0.026074768           0.4037249 0.68641501
## Sex            -0.048958927 0.205484630          -0.2382608 0.81167884
## Weather        -0.001158174 0.002801641          -0.4133914 0.67931990
## Julian Date     0.007755831 0.003912291           1.9824268 0.04743149
## Body Condition  0.088698251 0.099368220           0.8926219 0.37205968

## AIC 
## [1] 104.0391

## Comment: Only 2 variables Site, Julian Date are significant in Part 2 of the model

## Total AIC: 135.6052 + 104.0391 = 239.6441

## Comment: Next we fit two-part model with two significant variables (Site and Julian Date)

####################################################################################

# Reading data
rm(list = ls())
ratt <- read.csv("Osoyoos Data", header = T) # Read data from CSV format
ratt$Julian.Date <- ratt$Julian.Date - 20000
ratt <- ratt[-21,]
ratt$Site <- (ratt$Site * -1) + 3 # Site = 2: Park; Site = 1: Ranch
attach(ratt) # Attach data to R console

# Fitting two-part models (two significant predictors)

# Part 1 model for the zero y's

mle1.rattle.significant2 <- function(b0, b1, b2, x1, x2, y){
  # b0: The initial value of intercept
  # b1: The initial value of slope (Site)
  # b2: The initial value of slope (Julian Date)
  # x1: The predictor variable (Site)
  # x2: The predictor variable (Julian Date)
  # y: The response variable
  b <- c(b0, b1, b2)
  n <- length(y) # Total number of data points
  n0 <- length(y[y == 0])  # The number of zero y values
  x10 <- sum(x1[y == 0])    # The sum of the predictor variable (Site) for which the response is zero
  x20 <- sum(x2[y == 0])    # The sum of the predictor variable (Julian Date) for which the response is zero
  r <- 0 # Number of iterations
  repeat{
    b0 <- b[1]
    b1 <- b[2]
    b2 <- b[3]
    r <- r + 1
    pr <- rep(0, n)
    s0 <- s1 <- s2 <- 0
    i00 <- i01 <- i02 <- 0
    i11 <- i12 <- 0
    i22 <- 0
    for(i in 1:n){
      pr[i] <- exp(b0 + b1 * x1[i] + b2 * x2[i])/(1 + exp(b0 + b1 * x1[i] + b2 * x2[i]))
      s0 <- s0 + pr[i]
      s1 <- s1 + x1[i] * pr[i]
      s2 <- s2 + x2[i] * pr[i]
      i00 <- i00 + pr[i] * (1 - pr[i])
      i01 <- i01 + x1[i] * pr[i] * (1 - pr[i])
      i02 <- i02 + x2[i] * pr[i] * (1 - pr[i])
      i11 <- i11 + x1[i]^2 * pr[i] * (1 - pr[i])
      i12 <- i12 + x1[i] * x2[i] * pr[i] * (1 - pr[i])
      i22 <- i22 + x2[i]^2 * pr[i] * (1 - pr[i])
    }
    score <- c(n0 - s0, x10 - s1, x20 - s2)
    infor <- matrix(c(i00, i01, i02,
                      i01, i11, i12,
                      i02, i12, i22),
                      ncol = 3, byrow = T)
    b.new <- b + solve(infor) %*% score
    if(abs(b.new[1] - b[1]) <= 0.001 & abs(b.new[2] - b[2]) <= 0.001 & abs(b.new[3] - b[3]) <= 0.001){
      cat("Number of iterations \n")
      print(r)
      result <- cbind(b.new, sqrt(diag(solve(infor))), b.new/sqrt(diag(solve(infor))), 2 * (1 - pnorm(abs(b.new/sqrt(diag(solve(infor)))), mean = 0, sd = 1)))
      colnames(result) <- c("Coefficients", "Std Errors", "Test Statistics (Z)", "P-values")
      rownames(result) <- c("Intercept", "Site", "Julian Date")
      print(result)
#      return(result)      
      cat("\nThe AIC \n")
      AIC <- -2 * sum(b.new[1] + b.new[2] * x1[y == 0] + b.new[3] * x2[y == 0]) + 2 * sum(log(1 + exp(b.new[1] + b.new[2] * x1 + b.new[3] * x2))) + 2 * length(b.new)
      print(AIC)
      break
    }
    b <- b.new
  }
}


res <- mle1.rattle.significant2(0, 0, 0, Site, Julian.Date, RattleDistance)
install.packages("xtable")
library(xtable)
xtable(res, digits = 3)

## Number of iterations 
## [1] 4
##             Coefficients  Std Errors Test Statistics (Z)     P-values
## Intercept   -0.718841468 1.809212043          -0.3973230 6.911293e-01
## Site         1.853062668 0.443758777           4.1758333 2.968972e-05
## Julian Date -0.007968226 0.008801254          -0.9053512 3.652794e-01
## 
## The AIC 
## [1] 131.9247

## 1. Interpretation of the coefficient of Site:
##
## For fixed julian date, the odds of no-rattle is 
## exp(1.853062668) = 6.379327 times higher in the Park than in the Ranch. 


# Part 2 model for the non-zero y's 

mle2.rattle.significant2 <- function(b0, b1, b2, sig2, x1, x2, y){
  # b0: The initial value of intercept
  # b1: The initial value of slope (Site)
  # b2: The initial value of slope (Julian Date)
  # sig2: The initial value of variance
  # x1: The predictor variable (Site)
  # x2: The predictor variable (Julian Date)
  # y: The response variable
  theta <- c(b0, b1, b2, sig2)
  n <- length(y) # Total number of data points
  r <- 0 # Number of iterations
  repeat{
    b0 <- theta[1]
    b1 <- theta[2]
    b2 <- theta[3]
    sig2 <- theta[4]
    r <- r + 1
    s0 <- sum(log(y) - b0 - b1 * x1 - b2 * x2)/sig2
    s1 <- sum((log(y) - b0 - b1 * x1 - b2 * x2) * x1)/sig2
    s2 <- sum((log(y) - b0 - b1 * x1 - b2 * x2) * x2)/sig2
    s3 <- (-n + sum((log(y) - b0 - b1 * x1 - b2 * x2)^2)/sig2)/(2*sig2)
    score <- c(s0, s1, s2, s3)
    i00 <- n/sig2
    i01 <- sum(x1)/sig2
    i02 <- sum(x2)/sig2
    i03 <- sum(log(y) - b0 - b1 * x1 - b2 * x2)/sig2^2
    i11 <- sum(x1^2)/sig2
    i12 <- sum(x1 * x2)/sig2
    i13 <- sum(x1 * (log(y) - b0 - b1 * x1 - b2 * x2))/sig2^2
    i22 <- sum(x2^2)/sig2
    i23 <- sum(x2 * (log(y) - b0 - b1 * x1 - b2 * x2))/sig2^2
    i33 <- -n/(2 * sig2^2) + sum((log(y) - b0 - b1 * x1 - b2 * x2)^2)/sig2^3
    infor <- matrix(c(i00, i01, i02, i03,
                      i01, i11, i12, i13,
                      i02, i12, i22, i23,
                      i03, i13, i23, i33),
                      ncol = 4, byrow = T)
    theta.new <- theta + solve(infor) %*% score
    if(abs(theta.new[1] - theta[1]) <= 0.001 & abs(theta.new[2] - theta[2]) <= 0.001 & abs(theta.new[3] - theta[3]) <= 0.001 & abs(theta.new[4] - theta[4]) <= 0.001){
      cat("Number of iterations \n")
      print(r)
      result <- cbind(theta.new[1:3], sqrt(diag(solve(infor)))[c(1:3)], theta.new[c(1:3)]/sqrt(diag(solve(infor)))[c(1:3)], 2 * (1 - pnorm(abs(theta.new[c(1:3)]/sqrt(diag(solve(infor)))[c(1:3)]), mean = 0, sd = 1)))
      colnames(result) <- c("Coefficients", "Std Errors", "Test Statistics (Z)", "P-values")
      rownames(result) <- c("Intercept", "Site", "Julian Date")
      print(result)      
#      return(result)
      cat("\nAIC \n")
      AIC <- n * log(2 * pi) + n * log(theta.new[4]) + (1/theta.new[4]) * sum((log(y) - theta.new[1] - theta.new[2] * x1 - theta.new[3] * x2)^2) + 2 * length(theta.new)
      print(AIC)
      break
    }
    theta <- theta.new
  }
}

Site <- Site[RattleDistance > 0]
Julian.Date <- Julian.Date[RattleDistance > 0]
RattleDistance <- RattleDistance[RattleDistance > 0]
## summary(lm(log(RattleDistance)~Site + Julian.Date))

res <- mle2.rattle.significant2(-0.808, -0.55, 0.007, 0.48, Site, Julian.Date, RattleDistance)
xtable(res, digits = 3)

## Number of iterations 
## [1] 3
##             Coefficients  Std Errors Test Statistics (Z)   P-values
## Intercept   -0.807708601 0.832548367          -0.9701642 0.33196466
## Site        -0.548820044 0.233427218          -2.3511399 0.01871600
## Julian Date  0.007255011 0.003732159           1.9439178 0.05190537

## AIC 
## [1] 97.58419

## Total AIC: 131.9247 + 97.58419 = 229.5089

## Interpretation of coefficients:

## 1. Site:
## The expected rattle distance is 0.55 log-meter closer in the Park than in the Ranch.

## 2. Julian Date
## With the increase of Julian Date by 30 days (as it moves from the Winter to the Summer),
## the expected rattle distance is increased by 0.22 log-meter.
